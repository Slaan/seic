 <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css"/>
<link rel="stylesheet" href="/assets/stylesheets/leaflet.css"/>
<link rel="stylesheet" href="/leaflet-routing-machine-2.3.0/leaflet-routing-machine.css"/>



<div class="row col-md-12">

  <div class="panel panel-default">
    <div class="panel-heading">Map</div>
    <div class="panel-body">
      <div class="col-md-3 col-md-offset-0" >
        <label for="name">Name</label>
        <input type="text" name="name" id="name">
        <label for="description">Description</label>
        <input type="text" name="description" id="description">
        <label for="keywords">Keywords</label>
        <span style="font-size: 10px;">Example: Wald Strand Berg</span>
        <input type="text" name="keywords" id="keywords">
        <button class="save-btn" onclick="exportRoute()">Save</button>
        <br><br>
        <%= link_to 'View tracks', tracks_path %>

      </div>
      <div id="map"></div>
    </div>
  </div>


  <style>
    div#map {
      float: left;
      height: 550px;
      width: 720px;
    }
  </style>

  <script type="application/javascript">

    // initial view = Hamburg
    var map = L.map('map').setView([53.5502099, 9.9993636], 9);


    // Create pop-up for setting waypoints in map
    function createButton(label, container) {
      var btn = L.DomUtil.create('button', '', container);
      btn.setAttribute('type', 'button');
      btn.innerHTML = label;
      return btn;
    }

    // Add start and destination waypoint from clicking on map
    map.on('click', function(e) {
      var container = L.DomUtil.create('div'),
          startBtn = createButton('Start from this location', container),
          destBtn = createButton('Go to this location', container);

      L.popup()
          .setContent(container)
          .setLatLng(e.latlng)
          .openOn(map);

      L.DomEvent.on(startBtn, 'click', function() {
        control.spliceWaypoints(0, 1, e.latlng);
        map.closePopup();
      });

      L.DomEvent.on(destBtn, 'click', function() {
        control.spliceWaypoints(control.getWaypoints().length - 1, 1, e.latlng);
        map.closePopup();
      });
    });

    // Intitialize total distance of route
    var lengthInKm;

   L.Icon.Default.imagePath = "https://s3.eu-central-1.amazonaws.com/seic-storage/public/images"
    // Get map itself
    // http://{s}.tiles.mapbox.com/v3/MapID/{z}/{x}/{y}.png
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Map data &copy; <a href="https://openstreetmap.org">OpenStreetMap</a> ' +
      'contributors, ' + '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
      'Imagery ï¿½ <a href="https://mapbox.com">Mapbox</a>',
      maxZoom: 18
    }).addTo(map);

    // Add basic routing control
    var control = L.Routing.control({
      routeWhileDragging: true,
      geocoder: L.Control.Geocoder.nominatim(),
      reverseWaypoints: true,
      fitSelectedRoutes: 'truthy',
      // Set GraphHopper as router -- IMPORTANT: Only 500 queries per day for free...!
      router: L.Routing.graphHopper('0a9d51e1-9fa5-4570-99f6-c1c15b4ef542', {"urlParameters": {'vehicle': "bike"}})
    });

    control.addTo(map);

    // Get distance from map, convert to km
    control.addEventListener("routesfound", function (route) {
      lengthInKm = route.routes[0].summary.totalDistance / 1000;
    });

    // Initialize map with user's home address unless map is initialized with route
    var waypoints = control.getWaypoints();
    if (waypoints[0].latLng == null || waypoints[1].latLng == null) {
      findUserLocationOnMap();
    }


    function findUserLocationOnMap() {
      // Find user location and move map initially
      L.Control.Geocoder.nominatim().geocode(
          "@{currentUserAddress}",
          function (results) {
            // Only moves to user location if address was found
            if (results.length > 0) {
              map.panTo(results[0].center);
              map.fitBounds(results[0].bbox);
            }
          });
    }

    // Gets called from "Speichern" button
    function exportRoute() {
      var waypoints = control.getWaypoints();

      // Maps has too much information for backend,
      // therewith we build hashes with relevant information
      // data = array of objects, objects = hashes with lat, lng and name
      var data = $.map(waypoints, function(value, index){
        return {
          latitude: value.latLng.lat,
          longitude: value.latLng.lng,
          name: value.name
        }
      });

      // Set name of the route
      var routeName = document.getElementById("name").value;

      // Catch if user didn't type a name
      if (routeName === "") {
        window.alert("Die Route kann ohne Namen nicht gespeichert werden.");
        return;
      }

      // Set description of the route
      var routeDescription = document.getElementById("description").value;

      if(routeDescription === "") {
        window.alert("Die Route kann ohne Beschreibung nicht gespeichert werden.");
        return;
      }

      // Set keywords of the route
      var tmp = document.getElementById("keywords").value;
      var routeKeywords = tmp.split(" ");

      if(routeKeywords === "") {
        window.alert("Die Route kann ohne Keyword nicht gespeichert werden.");
        return;
      }

      var tmp1 = GeoJSON.parse(data, {Point: ['latitude', 'longitude']});
      var geo = JSON.stringify(tmp1);
      console.log(geo);

      var route = {
        name: routeName,
        description: routeDescription,
        keywords: routeKeywords,
        waypoints: geo
      }

      console.log(route);

      // Send information to backend
      $.post("/create_track", {data: JSON.stringify(route)}).done(function() {
        console.log(route);
        console.log(JSON.stringify(route));
        alert( "route is saved successfully" );
        window.location.reload();
      }).fail(function() {
        alert( "Something went wrong, pls try again." );
      });
    }



  </script>
</div>
